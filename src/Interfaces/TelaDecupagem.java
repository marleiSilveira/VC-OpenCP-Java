/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import opencv.project.n1.face.recognition.FaceDetector;
import opencv.project.n1.face.recognition.FaceRecognizer;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author Marlei M. Silveira
 */
public class TelaDecupagem extends javax.swing.JInternalFrame {

    ArrayList <Mat> detectetFaces = new ArrayList <Mat> ();
    FaceRecognizer fr; 
    
    static{System.loadLibrary(Core.NATIVE_LIBRARY_NAME);}

    /**
     * Creates new form TelaDecupagem
     */
    public TelaDecupagem() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jL_face1 = new javax.swing.JLabel();
        jL_face2 = new javax.swing.JLabel();
        jL_face3 = new javax.swing.JLabel();
        jL_face4 = new javax.swing.JLabel();
        jL_face5 = new javax.swing.JLabel();
        jL_face6 = new javax.swing.JLabel();
        jCB_face1 = new javax.swing.JCheckBox();
        jCB_face2 = new javax.swing.JCheckBox();
        jCB_face3 = new javax.swing.JCheckBox();
        jCB_face4 = new javax.swing.JCheckBox();
        jCB_face5 = new javax.swing.JCheckBox();
        jCB_face6 = new javax.swing.JCheckBox();
        jTF_face1 = new javax.swing.JTextField();
        jTF_face2 = new javax.swing.JTextField();
        jTF_face3 = new javax.swing.JTextField();
        jTF_face4 = new javax.swing.JTextField();
        jTF_face5 = new javax.swing.JTextField();
        jTF_face6 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel11 = new javax.swing.JPanel();
        jCB_paralelo = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTA_resultados = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTA_listaFotos = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCB_persistir4 = new javax.swing.JCheckBox();
        jTextField3 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel7 = new javax.swing.JPanel();
        jChB_destacar_face = new javax.swing.JCheckBox();
        jCB_haarcascade_face = new javax.swing.JComboBox<>();
        jChB_destacar_olhos = new javax.swing.JCheckBox();
        jCB_haarcascade_olhos = new javax.swing.JComboBox<>();
        jChB_destacar_boca = new javax.swing.JCheckBox();
        jCB_haarcascade_boca = new javax.swing.JComboBox<>();
        jChB_destacar_nariz = new javax.swing.JCheckBox();
        jCB_haarcascade_nariz = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jCB_filtro1 = new javax.swing.JComboBox<>();
        jCB_filtro4 = new javax.swing.JComboBox<>();
        jCB_filtro2 = new javax.swing.JComboBox<>();
        jCB_filtro3 = new javax.swing.JComboBox<>();
        jCB_filtro5 = new javax.swing.JComboBox<>();
        jFTF_base_imagem_in = new javax.swing.JFormattedTextField();
        jChB_redimensionar_img_in = new javax.swing.JCheckBox();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel8 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jCB_filtro6 = new javax.swing.JComboBox<>();
        jCB_filtro7 = new javax.swing.JComboBox<>();
        jCB_filtro8 = new javax.swing.JComboBox<>();
        jCB_filtro9 = new javax.swing.JComboBox<>();
        jCB_filtro10 = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jFTF_base_face_recortada = new javax.swing.JFormattedTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCB_classificador = new javax.swing.JComboBox<>();
        jL_NumOfComponents = new javax.swing.JLabel();
        jFTF_num_of_components = new javax.swing.JFormattedTextField();
        jL_Threshold = new javax.swing.JLabel();
        jFTF_threshold = new javax.swing.JFormattedTextField();
        jL_TypeRecognizer = new javax.swing.JLabel();
        jFTF_type_recognizer = new javax.swing.JFormattedTextField();
        jL_Radius = new javax.swing.JLabel();
        jFTF_radius = new javax.swing.JFormattedTextField();
        jL_Neighbors = new javax.swing.JLabel();
        jFTF_neighbors = new javax.swing.JFormattedTextField();
        jL_GridX = new javax.swing.JLabel();
        jFTF_gridX = new javax.swing.JFormattedTextField();
        jL_GridY = new javax.swing.JLabel();
        jFTF_gridY = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        jCB_base_faces = new javax.swing.JComboBox<>();
        jCB_clear_base = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Decupagem automática por reconhecimento facial");

        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setText("Diretório ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Imagem Ref");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setAutoscrolls(true);

        jButton3.setText("jButton3");
        jSplitPane1.setRightComponent(jButton3);

        jPanel6.setOpaque(false);
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 450));
        jPanel6.setRequestFocusEnabled(false);

        jButton4.setText("1 - Detectar Faces");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 108, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel6);

        jPanel10.setAutoscrolls(true);

        jButton6.setText("2 - Preparar Base");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jL_face4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jCB_face4)
                            .addGap(18, 18, 18)
                            .addComponent(jTF_face4, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jL_face6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jCB_face6)
                            .addGap(18, 18, 18)
                            .addComponent(jTF_face6, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jL_face5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jCB_face5)
                            .addGap(18, 18, 18)
                            .addComponent(jTF_face5, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jL_face3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jCB_face3)
                            .addGap(18, 18, 18)
                            .addComponent(jTF_face3, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jL_face1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jCB_face1)
                            .addGap(18, 18, 18)
                            .addComponent(jTF_face1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jL_face2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jCB_face2)
                            .addGap(18, 18, 18)
                            .addComponent(jTF_face2, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_face1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCB_face1)
                    .addComponent(jTF_face1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_face2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTF_face2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCB_face2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_face3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTF_face3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCB_face3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_face4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTF_face4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCB_face4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_face5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTF_face5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCB_face5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_face6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTF_face6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCB_face6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel10);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2)))
                .addContainerGap())
            .addComponent(jSplitPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );

        jTabbedPane1.addTab("Entradas", jPanel2);

        jSplitPane4.setDividerLocation(230);
        jSplitPane4.setOneTouchExpandable(true);

        jCB_paralelo.setText("Processamento Paralelo");

        jButton5.setText("3 - Decupar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCB_paralelo)
                            .addComponent(jButton5))
                        .addGap(0, 70, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jCB_paralelo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(26, 26, 26)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jSplitPane4.setLeftComponent(jPanel11);

        jTA_resultados.setColumns(20);
        jTA_resultados.setRows(5);
        jScrollPane1.setViewportView(jTA_resultados);

        jTA_listaFotos.setColumns(20);
        jTA_listaFotos.setRows(5);
        jScrollPane2.setViewportView(jTA_listaFotos);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jSplitPane4.setRightComponent(jPanel12);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane4)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane4)
        );

        jTabbedPane1.addTab("Processamento", jPanel3);

        jCheckBox2.setText("Salvar em Banco de Dados");
        jCheckBox2.setEnabled(false);

        jCheckBox3.setText("Salvar em Arquivo Texto");
        jCheckBox3.setEnabled(false);

        jCheckBox4.setText("Salvar nos Métadados da Imagem");
        jCheckBox4.setEnabled(false);

        jCB_persistir4.setText("Copiar  Fotos para Pasta Separada");

        jTextField3.setText("C:\\Users\\Acer\\Desktop\\Pasta Destino\\");

            javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
            jPanel4.setLayout(jPanel4Layout);
            jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jCB_persistir4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jCheckBox4)
                        .addComponent(jCheckBox3)
                        .addComponent(jCheckBox2))
                    .addContainerGap(92, Short.MAX_VALUE))
            );
            jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addComponent(jCheckBox2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCheckBox3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCheckBox4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCB_persistir4)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(421, Short.MAX_VALUE))
            );

            jTabbedPane1.addTab("Persistência", jPanel4);

            jSplitPane2.setDividerLocation(230);

            jPanel7.setPreferredSize(new java.awt.Dimension(230, 442));
            jPanel7.setRequestFocusEnabled(false);

            jChB_destacar_face.setText("Destacar Faces");
            jChB_destacar_face.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jChB_destacar_faceActionPerformed(evt);
                }
            });

            jCB_haarcascade_face.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "haarcascade_frontalface_alt", " ", " " }));

            jChB_destacar_olhos.setText("Destacar Olhos");
            jChB_destacar_olhos.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jChB_destacar_olhosActionPerformed(evt);
                }
            });

            jCB_haarcascade_olhos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "haarcascade_eye", "haarcascade_eye_tree_eyeglasses", "haarcascade_mcs_eyepair_small", " ", " ", " " }));

            jChB_destacar_boca.setText("Destacar Boca");
            jChB_destacar_boca.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jChB_destacar_bocaActionPerformed(evt);
                }
            });

            jCB_haarcascade_boca.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "haarcascade_mcs_mouth", "haarcascade_smile", " ", " " }));

            jChB_destacar_nariz.setText("Destacar Nariz");
            jChB_destacar_nariz.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jChB_destacar_narizActionPerformed(evt);
                }
            });

            jCB_haarcascade_nariz.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "haarcascade_mcs_nose", " ", " " }));

            jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jLabel2.setText("2. Detecção");

            jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jLabel11.setText("1. Normalização Pré-Detecção");

            jLabel12.setText("Tamanho da imagem de entrada");

            jLabel17.setText("Aplicar Filtros");

            jCB_filtro1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Gausian Blur", "Histogram Equalization" }));

            jCB_filtro4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Gausian Blur", "Histogram Equalization" }));
            jCB_filtro4.setEnabled(false);

            jCB_filtro2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Gausian Blur", "Histogram Equalization" }));

            jCB_filtro3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Gausian Blur", "Histogram Equalization" }));
            jCB_filtro3.setEnabled(false);

            jCB_filtro5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Gausian Blur", "Histogram Equalization" }));
            jCB_filtro5.setEnabled(false);
            jCB_filtro5.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCB_filtro5ActionPerformed(evt);
                }
            });

            jFTF_base_imagem_in.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_base_imagem_in.setText("700");
            jFTF_base_imagem_in.setToolTipText("");

            jChB_redimensionar_img_in.setText("Base (pixel)");
            jChB_redimensionar_img_in.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jChB_redimensionar_img_inActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
            jPanel7.setLayout(jPanel7Layout);
            jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCB_haarcascade_olhos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCB_haarcascade_face, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCB_haarcascade_boca, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCB_haarcascade_nariz, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                            .addGap(0, 13, Short.MAX_VALUE)
                            .addComponent(jChB_redimensionar_img_in)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jFTF_base_imagem_in, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jCB_filtro1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCB_filtro4, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCB_filtro2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCB_filtro3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCB_filtro5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jChB_destacar_olhos)
                                .addComponent(jChB_destacar_face)
                                .addComponent(jChB_destacar_boca)
                                .addComponent(jChB_destacar_nariz)
                                .addComponent(jLabel2)
                                .addComponent(jLabel11)
                                .addComponent(jLabel12)
                                .addComponent(jLabel17))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel11)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel12)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jFTF_base_imagem_in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jChB_redimensionar_img_in))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel17)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jCB_filtro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jChB_destacar_face)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jCB_haarcascade_face, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jChB_destacar_olhos)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jCB_haarcascade_olhos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jChB_destacar_boca)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jCB_haarcascade_boca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jChB_destacar_nariz)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jCB_haarcascade_nariz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(33, 33, 33))
            );

            jSplitPane2.setLeftComponent(jPanel7);

            jSplitPane3.setDividerLocation(230);

            jPanel8.setPreferredSize(new java.awt.Dimension(200, 584));

            jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jLabel18.setText("3. Normalização Pré-Reconhecimento");

            jLabel19.setText("Aplicar Filtros");

            jCB_filtro6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Alinhar Olhos", "Gausian Blur", "Histogram Equalization" }));

            jCB_filtro7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Alinhar Olhos", "Gausian Blur", "Histogram Equalization" }));

            jCB_filtro8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Alinhar Olhos", "Gausian Blur", "Histogram Equalization" }));
            jCB_filtro8.setEnabled(false);

            jCB_filtro9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Alinhar Olhos", "Gausian Blur", "Histogram Equalization" }));
            jCB_filtro9.setEnabled(false);

            jCB_filtro10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Alinhar Olhos", "Gausian Blur", "Histogram Equalization" }));
            jCB_filtro10.setEnabled(false);

            jLabel15.setText("Tamanho da Face Recortada");

            jLabel16.setText("Base (pixel)");

            jFTF_base_face_recortada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_base_face_recortada.setText("200");

            javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
            jPanel8.setLayout(jPanel8Layout);
            jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCB_filtro10, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCB_filtro9, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCB_filtro8, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCB_filtro7, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCB_filtro6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createSequentialGroup()
                                    .addComponent(jLabel18)
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jLabel16)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jFTF_base_face_recortada, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel19)
                                .addComponent(jLabel15))
                            .addGap(0, 0, Short.MAX_VALUE))))
            );
            jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel18)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel15)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(jFTF_base_face_recortada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(9, 9, 9)
                    .addComponent(jLabel19)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jCB_filtro6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_filtro10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(282, Short.MAX_VALUE))
            );

            jSplitPane3.setLeftComponent(jPanel8);

            jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jLabel3.setText("4. Reconhecimento (Classificação)");

            jLabel4.setText("Classificador:");

            jCB_classificador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FisherFaces", "EigenFaces", "LBPHFaces" }));
            jCB_classificador.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    jCB_classificadorItemStateChanged(evt);
                }
            });

            jL_NumOfComponents.setText("Num Of Components");
            jL_NumOfComponents.setEnabled(false);

            jFTF_num_of_components.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_num_of_components.setText("1");
            jFTF_num_of_components.setEnabled(false);

            jL_Threshold.setText("Threshold");
            jL_Threshold.setEnabled(false);

            jFTF_threshold.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_threshold.setText("1200");
            jFTF_threshold.setEnabled(false);

            jL_TypeRecognizer.setText("Type Recognizer");
            jL_TypeRecognizer.setEnabled(false);

            jFTF_type_recognizer.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_type_recognizer.setEnabled(false);

            jL_Radius.setText("Radius");
            jL_Radius.setEnabled(false);

            jFTF_radius.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_radius.setText("1");
            jFTF_radius.setEnabled(false);

            jL_Neighbors.setText("Neighbors");
            jL_Neighbors.setEnabled(false);

            jFTF_neighbors.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_neighbors.setText("8");
            jFTF_neighbors.setEnabled(false);

            jL_GridX.setText("Grid X");
            jL_GridX.setEnabled(false);

            jFTF_gridX.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_gridX.setText("8");
            jFTF_gridX.setEnabled(false);

            jL_GridY.setText("Grid Y");
            jL_GridY.setEnabled(false);

            jFTF_gridY.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
            jFTF_gridY.setText("8");
            jFTF_gridY.setEnabled(false);

            jLabel13.setText("Base");

            jCB_base_faces.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Own Base", "Yalle   -  Faces  ", "Att     -   Faces", " " }));

            jCB_clear_base.setText("Limpar base antes de novo processo");

            javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
            jPanel9.setLayout(jPanel9Layout);
            jPanel9Layout.setHorizontalGroup(
                jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCB_classificador, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jL_NumOfComponents)
                                        .addComponent(jL_Threshold)
                                        .addComponent(jL_TypeRecognizer)
                                        .addComponent(jL_Radius)
                                        .addComponent(jL_Neighbors)
                                        .addComponent(jL_GridX)
                                        .addComponent(jL_GridY))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jFTF_num_of_components)
                                        .addComponent(jFTF_threshold, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jFTF_type_recognizer, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jFTF_radius, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jFTF_neighbors, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jFTF_gridX, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jFTF_gridY, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addGap(50, 50, 50))
                        .addGroup(jPanel9Layout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jCB_base_faces, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 62, Short.MAX_VALUE))
                        .addGroup(jPanel9Layout.createSequentialGroup()
                            .addComponent(jCB_clear_base)
                            .addGap(0, 0, Short.MAX_VALUE))))
            );
            jPanel9Layout.setVerticalGroup(
                jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel4)
                    .addGap(3, 3, 3)
                    .addComponent(jCB_classificador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_NumOfComponents)
                        .addComponent(jFTF_num_of_components, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_Threshold)
                        .addComponent(jFTF_threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_TypeRecognizer)
                        .addComponent(jFTF_type_recognizer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_Radius)
                        .addComponent(jFTF_radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_Neighbors)
                        .addComponent(jFTF_neighbors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_GridX)
                        .addComponent(jFTF_gridX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jL_GridY)
                        .addComponent(jFTF_gridY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jCB_base_faces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jCB_clear_base)
                    .addContainerGap(218, Short.MAX_VALUE))
            );

            jCB_clear_base.getAccessibleContext().setAccessibleName("jCB_clear_base");

            jSplitPane3.setRightComponent(jPanel9);

            jSplitPane2.setRightComponent(jSplitPane3);

            javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
            jPanel5.setLayout(jPanel5Layout);
            jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
            );
            jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
            );

            jTabbedPane1.addTab("Configurações", jPanel5);

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1)
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecionar diretório de imagens");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retorno = fileChooser.showOpenDialog(this);     
        
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextField1.setText(file.getPath());

        }
         
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecionar imagens de referência");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Imagem", "jpg"); 
        fileChooser.setFileFilter(filtro);
        
        int retorno = fileChooser.showOpenDialog(this);     
        
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextField2.setText(file.getPath());
            //jLabel1.setIcon(new ImageIcon(file.getPath()));
            
            BufferedImage imagem = null;
            try {
                imagem = ImageIO.read(file);
                carregarImagemInp(1, imagem);
            } catch (IOException ex) {
                Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
            }
                
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jChB_destacar_faceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChB_destacar_faceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChB_destacar_faceActionPerformed

    private void jChB_destacar_olhosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChB_destacar_olhosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChB_destacar_olhosActionPerformed

    private void jChB_destacar_bocaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChB_destacar_bocaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChB_destacar_bocaActionPerformed

    private void jChB_destacar_narizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChB_destacar_narizActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChB_destacar_narizActionPerformed

    private void jChB_redimensionar_img_inActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChB_redimensionar_img_inActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChB_redimensionar_img_inActionPerformed

    private void jCB_classificadorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCB_classificadorItemStateChanged
        switch (jCB_classificador.getSelectedItem().toString()) {
            case "FisherFaces":
            jFTF_num_of_components.setEnabled(true);
            jFTF_threshold.setEnabled(true);
            jFTF_type_recognizer.setEnabled(false);
            jFTF_radius.setEnabled(false);
            jFTF_neighbors.setEnabled(false);
            jFTF_gridX.setEnabled(false);
            jFTF_gridY.setEnabled(false);
            jL_NumOfComponents.setEnabled(true);
            jL_Threshold.setEnabled(true);
            jL_TypeRecognizer.setEnabled(false);
            jL_Radius.setEnabled(false);
            jL_Neighbors.setEnabled(false);
            jL_GridX.setEnabled(false);
            jL_GridY.setEnabled(false);
            break;

            case "EigenFaces":
            jFTF_num_of_components.setEnabled(true);
            jFTF_threshold.setEnabled(true);
            jFTF_type_recognizer.setEnabled(false);
            jFTF_radius.setEnabled(false);
            jFTF_neighbors.setEnabled(false);
            jFTF_gridX.setEnabled(false);
            jFTF_gridY.setEnabled(false);
            jL_NumOfComponents.setEnabled(true);
            jL_Threshold.setEnabled(true);
            jL_TypeRecognizer.setEnabled(false);
            jL_Radius.setEnabled(false);
            jL_Neighbors.setEnabled(false);
            jL_GridX.setEnabled(false);
            jL_GridY.setEnabled(false);
            break;

            case "LBPHFaces":
            jFTF_num_of_components.setEnabled(false);
            jFTF_threshold.setEnabled(true);
            jFTF_type_recognizer.setEnabled(false);
            jFTF_radius.setEnabled(true);
            jFTF_neighbors.setEnabled(true);
            jFTF_gridX.setEnabled(true);
            jFTF_gridY.setEnabled(true);
            jL_NumOfComponents.setEnabled(false);
            jL_Threshold.setEnabled(true);
            jL_TypeRecognizer.setEnabled(false);
            jL_Radius.setEnabled(true);
            jL_Neighbors.setEnabled(true);
            jL_GridX.setEnabled(true);
            jL_GridY.setEnabled(true);
            break;
        }

        carregarClassificadorDeImagens();
    }//GEN-LAST:event_jCB_classificadorItemStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed


        // 1 - Normalização Pré-Detecção ---------------------------------------
        Mat img = Imgcodecs.imread(jTextField2.getText());
          
        //redimensionar imagem de entrada
        if(jChB_redimensionar_img_in.isSelected() == true){
            try {
                img = redimensionarImagem(img);
            } catch (IOException ex) {
                Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        //filtros
        switch (jCB_filtro1.getSelectedItem().toString()) {
            case "Gausian Blur":
                Size ksize = new Size(3.0, 3.0);
                Imgproc.blur(img, img, ksize);                
            break;
            
            case "Histogram Equalization":                    
                Imgproc.cvtColor(img, img, Imgproc.COLOR_BGR2GRAY);
                Imgproc.equalizeHist(img, img);     
            break;
        }

        switch (jCB_filtro2.getSelectedItem().toString()) {
            case "Gausian Blur":
                Size ksize = new Size(3.0, 3.0);
                Imgproc.blur(img, img, ksize);                
            break;
            
            case "Histogram Equalization":                    
                Imgproc.cvtColor(img, img, Imgproc.COLOR_BGR2GRAY);
                Imgproc.equalizeHist(img, img);     
            break;
        }        
     
        
        // 2 - Detecção --------------------------------------------------------

        FaceDetector fd = new FaceDetector();
        //detectetFaces = fd.detectFaces(jTF_caminho_arquivo.getText(),
        detectetFaces = fd.detectFaces(img,        
                       "src/haarcascades/" + jCB_haarcascade_face.getSelectedItem().toString() + ".xml",
                       jChB_destacar_face.isSelected(),
                       "src/haarcascades/" + jCB_haarcascade_olhos.getSelectedItem().toString() + ".xml",
                       jChB_destacar_olhos.isSelected(),
                       "src/haarcascades/" + jCB_haarcascade_boca.getSelectedItem().toString() + ".xml",
                       jChB_destacar_boca.isSelected(),
                       "src/haarcascades/" + jCB_haarcascade_nariz.getSelectedItem().toString() + ".xml",
                       jChB_destacar_nariz.isSelected(), 
                       Integer.parseInt(jFTF_base_face_recortada.getText()),
                       Integer.parseInt(jFTF_base_face_recortada.getText()));
       
        ArrayList<Point> centerRightEye = fd.getCenterRightEye();
        ArrayList<Point> centerLeftEye = fd.getCenterLeftEye();
  
        try {
           carregarImagemInp(1, matToBufferedImage(fd.getImage()));
           ArrayList<Mat> detectetFaces = fd.getDetectetFaces();
           carregarImagemRefFaces(detectetFaces);
           
           treinarClassificador(); 
        } catch (IOException ex) {
            Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed


        File pastaBase = new File("src/Z_OwnFaceBase");       
        File[] arquivosBase = pastaBase.listFiles();
        int j = arquivosBase.length; 
        // 0 - Limpar base antes de nova detecção
        if (jCB_clear_base.isSelected()) {   
            for (int i = 0; i < arquivosBase.length; i++) {
                System.out.println(arquivosBase[i]);
                if(arquivosBase[i].getName().matches(".*")){
                    arquivosBase[i].delete();
                }
            } 
            j=0; 
        }
        
        //Adiciona os rostos conhecidos à base de referencia 
        String[] individuos = new String[6];
        File pasta = new File("src/detectedFaces");       
        File[] arquivos = pasta.listFiles(); 
 
        int i = 0;
        if (jCB_face1.isSelected()) {
            individuos[i] = jTF_face1.getText();
            File file = new File("src/Z_OwnFaceBase/" + j + "-" + individuos[i].toString() + ".png");
            arquivos[0].renameTo(file); 
            j++;
            i++;
        }
        if (jCB_face2.isSelected()) {
            individuos[i] = jTF_face2.getText();
            File file = new File("src/Z_OwnFaceBase/" + j + "-" + individuos[i].toString() + ".png");
            arquivos[1].renameTo(file); 
            j++;
            i++;
        }        
        if (jCB_face3.isSelected()) {
            individuos[i] = jTF_face3.getText();
            File file = new File("src/Z_OwnFaceBase/" + j + "-" + individuos[i].toString() + ".png");
            arquivos[2].renameTo(file); 
            j++;
            i++;
        }        
        if (jCB_face4.isSelected()) {
            individuos[i] = jTF_face4.getText();
            File file = new File("src/Z_OwnFaceBase/" + j + "-" + individuos[i].toString() + ".png");
            arquivos[3].renameTo(file); 
            j++;
            i++;
        }        
        if (jCB_face5.isSelected()) {
            individuos[i] = jTF_face5.getText();
            File file = new File("src/Z_OwnFaceBase/" + j + "-" + individuos[i].toString() + ".png");
            arquivos[4].renameTo(file); 
            j++;
            i++;
        }        
        if (jCB_face6.isSelected()) {
            individuos[i] = jTF_face6.getText();
            File file = new File("src/Z_OwnFaceBase/" + j + "-" + individuos[i].toString() + ".png");
            arquivos[5].renameTo(file); 
            j++;
            i++;
        }        

        
        
        //seta o foco na aba "Processamento"
        if (!(jTextField1.getText().equals(""))) {
            jTabbedPane1.setSelectedIndex(1);
        }        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jCB_filtro5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_filtro5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCB_filtro5ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        jTA_listaFotos.setText("");
        jTA_resultados.setText("");
        //percorre o diretório de fotos fazendo o reconhecimento de faces a cada imagem encontrada
        File pasta = new File(jTextField1.getText());       
        File [] arquivos = pasta.listFiles();         
        System.out.println("arquivos.length " + arquivos.length); 

        //Treina o classificador
        carregarClassificadorDeImagens();
        treinarClassificador();
        
        for (int i = 0; i < arquivos.length; i++) {
          
            if (jCB_paralelo.isSelected()) {
                new decuparDiretorio(arquivos[i].getPath()).start();
            }else{
                try {
                    reconhecerFace(arquivos[i].getPath(), arquivos[i].getName());
                } catch (IOException ex) {
                    Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void reconhecerFace(String imagePath, String fileName) throws IOException {
            // 1 - Normalização Pré-Detecção ---------------------------------------
            Mat img = Imgcodecs.imread(imagePath);

            jTA_resultados.append("----------------------------------------------------------------------- \n");
            jTA_resultados.append("Arquivo analisado: " + imagePath + "\n");
            jTA_resultados.append("Tamanho original - height: " + img.height() + " width " + img.width() + "\n");

            //redimensionar imagem de entrada
            if (jChB_redimensionar_img_in.isSelected() == true) {
                try {
                    img = redimensionarImagem(img);
                    jTA_resultados.append("Tamanho redimensionado - height: " + img.height() + " width " + img.width() + "\n");
                } catch (IOException ex) {
                    Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            //filtros
            switch (jCB_filtro1.getSelectedItem().toString()) {
                case "Gausian Blur":
                    Size ksize = new Size(3.0, 3.0);
                    Imgproc.blur(img, img, ksize);
                    break;

                case "Histogram Equalization":
                    Imgproc.cvtColor(img, img, Imgproc.COLOR_BGR2GRAY);
                    Imgproc.equalizeHist(img, img);
                    break;
            }

            switch (jCB_filtro2.getSelectedItem().toString()) {
                case "Gausian Blur":
                    Size ksize = new Size(3.0, 3.0);
                    Imgproc.blur(img, img, ksize);
                    break;

                case "Histogram Equalization":
                    Imgproc.cvtColor(img, img, Imgproc.COLOR_BGR2GRAY);
                    Imgproc.equalizeHist(img, img);
                    break;
            }

            // 2 - Detecção --------------------------------------------------------
            FaceDetector fd = new FaceDetector();
            //detectetFaces = fd.detectFaces(jTF_caminho_arquivo.getText(),
            detectetFaces = fd.detectFaces(img,
                    "src/haarcascades/" + jCB_haarcascade_face.getSelectedItem().toString() + ".xml",
                    jChB_destacar_face.isSelected(),
                    "src/haarcascades/" + jCB_haarcascade_olhos.getSelectedItem().toString() + ".xml",
                    jChB_destacar_olhos.isSelected(),
                    "src/haarcascades/" + jCB_haarcascade_boca.getSelectedItem().toString() + ".xml",
                    jChB_destacar_boca.isSelected(),
                    "src/haarcascades/" + jCB_haarcascade_nariz.getSelectedItem().toString() + ".xml",
                    jChB_destacar_nariz.isSelected(),
                    Integer.parseInt(jFTF_base_face_recortada.getText()),
                    Integer.parseInt(jFTF_base_face_recortada.getText()));

            ArrayList<Point> centerRightEye = fd.getCenterRightEye();
            ArrayList<Point> centerLeftEye = fd.getCenterLeftEye();

            jTA_resultados.append("Numero de faces detectadas: " + detectetFaces.size() + "\n");
            // 3 - Normalização pré-reconhecimento
            //filtros
            ArrayList<Mat> images = new ArrayList<Mat>();
            switch (jCB_filtro6.getSelectedItem().toString()) {
                case "Gausian Blur":
                    images = new ArrayList<Mat>();
                    for (Mat detectetFace : detectetFaces) {
                        Size ksize = new Size(3.0, 3.0);
                        Imgproc.blur(detectetFace, detectetFace, ksize);
                        images.add(detectetFace);
                    }
                    detectetFaces = images;

                    break;

                case "Histogram Equalization":
                    images = new ArrayList<Mat>();
                    for (Mat detectetFace : detectetFaces) {
                        Imgproc.cvtColor(detectetFace, detectetFace, Imgproc.COLOR_BGR2GRAY);
                        Imgproc.equalizeHist(detectetFace, detectetFace);
                        images.add(detectetFace);
                    }
                    detectetFaces = images;
                    break;

                case "Alinhar Olhos":
                    images = new ArrayList<Mat>();
                    if (centerRightEye.size() > 0 && centerLeftEye.size() > 0) {
                        for (int i = 0; i < detectetFaces.size(); i++) {
                            Mat detectedFace = detectetFaces.get(i);
                            double olhoDireitoX = centerRightEye.get(i).x;
                            double olhoDireitoY = centerRightEye.get(i).y;
                            double olhoEsquerdoX = centerLeftEye.get(i).x;
                            double olhoEsquerdoY = centerLeftEye.get(i).y;
                            double catetoAdjacente = olhoEsquerdoX - olhoDireitoX;
                            double catetoOposto = olhoEsquerdoY - olhoDireitoY;
                            double tgA = catetoOposto / catetoAdjacente;

                            double angulo = Math.toDegrees(Math.atan(tgA));
                            System.out.println("Cateto Oposto " + catetoOposto);
                            System.out.println("Cateto Adjacente " + catetoAdjacente);
                            System.out.println("tgA " + tgA);
                            System.out.println("angulo " + angulo);

                            Point center = new Point((detectedFace.height() / 2), (detectedFace.width() / 2));
                            double angle = Math.toDegrees(Math.atan(tgA));
                            double scale = 1;

                            Size rotatedSize = new Size(detectedFace.height(), detectedFace.height());
                            Mat mIntermediateMat = new Mat(rotatedSize, detectedFace.type());

                            //Imgproc.resize(src, dst, new Size(rotatedHeight, rotatedWidth));
                            Mat mapMatrix = Imgproc.getRotationMatrix2D(center, angle, scale);
                            Imgproc.warpAffine(detectedFace, mIntermediateMat, mapMatrix, detectedFace.size());

                            //dst = src.submat(0, mIntermediateMat.rows(), 0, mIntermediateMat.cols());
                            //detectedFace = new Mat(rotatedSize, detectedFace.type()); 
                            mIntermediateMat.copyTo(detectedFace);
                            //crop -10%

                            Rect retang = new Rect((int) (detectedFace.width() * 0.1), (int) (detectedFace.height() * 0.1), (int) (detectedFace.width() - (detectedFace.width() * 0.2)), (int) (detectedFace.height() - (detectedFace.height() * 0.2)));
                            detectedFace = detectedFace.submat(retang);

                            images.add(detectedFace);

                            String filename = "src/recognizeFaces/Rotated_Face_" + i + ".png";
                            Imgcodecs.imwrite(filename, detectedFace);

                        }
                        detectetFaces = images;
                    }
                    break;

            }

            // 4 - Classificação/reconhecimento das faces
            fr.recognizeFace(detectetFaces);

            ArrayList<Integer> predictedLabel = fr.getPredictedLabel();
            ArrayList<String> predictedLabelInfo = fr.getPredictedLabelInfo();
            ArrayList<Double> predictedConfidence = fr.getPredictedConfidence();

            for (int i = 0; i < predictedConfidence.size(); i++) {
                Double confidence = predictedConfidence.get(i);
                Integer label = predictedLabel.get(i);
                String labelInfo = predictedLabelInfo.get(i);
                //jTA_resultados.append("Face analisaza: " + detectetFaces.get(i) + "\n");

                jTA_resultados.append("Label     :" + label + "\n");
                jTA_resultados.append("Label Info:" + labelInfo + "\n");
                jTA_resultados.append("Confidence:" + confidence + "\n");
          /*      if (centerRightEye.size() > 0 && centerLeftEye.size() > 0) {
                    jTA_resultados.append("Olho Direito : x " + centerRightEye.get(i).x + " - y " + centerRightEye.get(i).y + "\n");
                    jTA_resultados.append("Olho Esquerdo: x " + centerLeftEye.get(i).x + " - y " + centerLeftEye.get(i).y + "\n");
                } */
                
                if (confidence <= Integer.parseInt(jFTF_threshold.getText())) {
                   jTA_listaFotos.append(imagePath + " contém " + labelInfo + "\n");
                   
                    if (jCB_persistir4.isSelected()) {
                        System.out.println("fileName " + fileName);
                        File arquivoDestino  = new File(jTextField3.getText() +  fileName);
                        File arquivoOrigem  = new File(imagePath);
                        copyFile(arquivoOrigem, arquivoDestino);
                    }
                }
            }
//jTA_resultados.append(fr.get);

            try {
                carregarImagemInp(2, matToBufferedImage(fd.getImage()));

            } catch (IOException ex) {
                Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }     
    
        public static void copyFile(File source, File destination) throws IOException {
            if (destination.exists())
                destination.delete();
            FileChannel sourceChannel = null;
            FileChannel destinationChannel = null;
            try {
                sourceChannel = new FileInputStream(source).getChannel();
                destinationChannel = new FileOutputStream(destination).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(),
                        destinationChannel);
            } finally {
                if (sourceChannel != null && sourceChannel.isOpen())
                    sourceChannel.close();
                if (destinationChannel != null && destinationChannel.isOpen())
                    destinationChannel.close();
           }
       }
    
    private Mat redimensionarImagem(Mat img) throws IOException{
        double altura = img.height();
        double largura = img.width();
        double proporcao;
        if(altura > largura){
            proporcao = altura/largura;
            altura = Integer.parseInt(jFTF_base_imagem_in.getText());
            largura = altura/proporcao;
        }else{
            proporcao = largura/altura; 
            largura = Integer.parseInt(jFTF_base_imagem_in.getText());
            altura = largura/proporcao;
        }

        Mat resizeimage = new Mat();
        Size sz = new Size(largura, altura);
        Imgproc.resize(img, resizeimage, sz);

        return resizeimage; 
    }
        
    private void carregarImagemInp(int processo, BufferedImage img) throws IOException{
        BufferedImage imagemInp = img;
        double altura = img.getHeight();
        double largura = img.getWidth();
        double proporcao;
        if(altura > largura){
            proporcao = altura/largura;
            altura = 450;
            largura = altura/proporcao;
        }else{
            proporcao = largura/altura; 
            largura = 450; 
            altura = largura/proporcao;
        }
        ImageIcon ico = new ImageIcon(img);
        
        switch (processo){
          case 1: //detecção de faces
            jLabel1.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
            jLabel1.repaint();
            jLabel1.setText("");     
            break;
          case 2: //reconhecimento de faces
            jLabel5.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
            jLabel5.repaint();
            jLabel5.setText(""); 
            break;
        }
        
        

                
    }
    
    private void carregarImagemRefFaces(ArrayList<Mat> detectetFaces) throws IOException{
        for (int j = 0; j < detectetFaces.size(); j++) {
            Mat face = detectetFaces.get(j);           
            BufferedImage imagemInp = matToBufferedImage(face);
            double altura = imagemInp.getHeight();
            double largura = imagemInp.getWidth();
            double proporcao;
            if(altura > largura){
                proporcao = altura/largura;
                altura = 50;
                largura = altura/proporcao;
            }else{
                proporcao = largura/altura; 
                largura = 50; 
                altura = largura/proporcao;
            }    
            ImageIcon ico = new ImageIcon(imagemInp);
            switch (j){
                case 0: 
                    jL_face1.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
                    jL_face1.repaint();
                    jL_face1.setText("");  
                    break;
                case 1: 
                    jL_face2.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
                    jL_face2.repaint();
                    jL_face2.setText("");
                    break;
                case 2: 
                    jL_face3.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
                    jL_face3.repaint();
                    jL_face3.setText("");
                    break;
                case 3: 
                    jL_face4.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
                    jL_face4.repaint();
                    jL_face4.setText("");
                    break;
                case 4: 
                    jL_face5.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
                    jL_face5.repaint();
                    jL_face5.setText("");
                    break;
                case 5: 
                    jL_face6.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int)largura, (int)altura, Image.SCALE_DEFAULT)));
                    jL_face6.repaint();
                    jL_face6.setText("");
                    break; 
            }
         
        }
        


 

                
    }    
    
    private void carregarClassificadorDeImagens() {
        System.out.println("carregarClassificadorDeImagens()");
        switch (jCB_classificador.getSelectedItem().toString()) {
            case "FisherFaces":
                System.out.println("FisherFaces");
                fr = new FaceRecognizer("FisherFaces", Integer.parseInt(jFTF_num_of_components.getText()), Double.parseDouble(jFTF_threshold.getText()));
                //fr = new FaceRecognizer("FisherFaces", 1, 1200);
                
                break;

            case "EigenFaces":
                System.out.println("EigenFaces");
                fr = new FaceRecognizer("EigenFaces", Integer.parseInt(jFTF_num_of_components.getText()), Double.parseDouble(jFTF_threshold.getText()));
                //fr = new FaceRecognizer("EigenFaces", 1,2000);

                break;

            case "LBPHFaces":
                System.out.println("LBPHFaces");
                fr = new FaceRecognizer("LBPHFaces", Integer.parseInt(jFTF_radius.getText()),Integer.parseInt(jFTF_neighbors.getText()),Integer.parseInt(jFTF_gridX.getText()),Integer.parseInt(jFTF_gridY.getText()),Double.parseDouble(jFTF_threshold.getText()));
                break;
        }
        treinarClassificador();

    }    

    private void treinarClassificador(){
        System.out.println("Interfaces.TelaDecupagem.treinarClassificador()");
        if (fr != null) {
            switch (jCB_base_faces.getSelectedItem().toString()){
                case "Yalle   -  Faces" :
                    fr.train("src/Z_YalleFaceBase");
                break;
                
                case "Att     -   Faces" :
                    fr.train("src/Z_AttFaceBase");
                break;
                
                case "Own Base" : 
                    fr.train("src/Z_OwnFaceBase");
                break;
            } 
        }          
    }    
  
    private Mat bufferedImageToMat(BufferedImage bi){
        System.out.println("--bi.getHeight() " + bi.getHeight());
        System.out.println("--bi.getWidth() " + bi.getWidth());
        Mat mat = new Mat(bi.getHeight(), bi.getWidth(), CvType.CV_8UC3);
        byte[] data = ((DataBufferByte) bi.getRaster().getDataBuffer()).getData();
        mat.put(0, 0, data); 
        return mat; 
    }
   
    private BufferedImage matToBufferedImage(Mat matrix) throws IOException{
        
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (matrix.channels() > 1){
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = matrix.channels() * matrix.rows() * matrix.cols();
        byte[] buffer = new byte[bufferSize];
        matrix.get(0,0,buffer);
        BufferedImage image = new BufferedImage(matrix.cols(), matrix.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(buffer, 0, targetPixels, 0, buffer.length);
        return image;       
    }        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jCB_base_faces;
    private javax.swing.JComboBox<String> jCB_classificador;
    private javax.swing.JCheckBox jCB_clear_base;
    private javax.swing.JCheckBox jCB_face1;
    private javax.swing.JCheckBox jCB_face2;
    private javax.swing.JCheckBox jCB_face3;
    private javax.swing.JCheckBox jCB_face4;
    private javax.swing.JCheckBox jCB_face5;
    private javax.swing.JCheckBox jCB_face6;
    private javax.swing.JComboBox<String> jCB_filtro1;
    private javax.swing.JComboBox<String> jCB_filtro10;
    private javax.swing.JComboBox<String> jCB_filtro2;
    private javax.swing.JComboBox<String> jCB_filtro3;
    private javax.swing.JComboBox<String> jCB_filtro4;
    private javax.swing.JComboBox<String> jCB_filtro5;
    private javax.swing.JComboBox<String> jCB_filtro6;
    private javax.swing.JComboBox<String> jCB_filtro7;
    private javax.swing.JComboBox<String> jCB_filtro8;
    private javax.swing.JComboBox<String> jCB_filtro9;
    private javax.swing.JComboBox<String> jCB_haarcascade_boca;
    private javax.swing.JComboBox<String> jCB_haarcascade_face;
    private javax.swing.JComboBox<String> jCB_haarcascade_nariz;
    private javax.swing.JComboBox<String> jCB_haarcascade_olhos;
    private javax.swing.JCheckBox jCB_paralelo;
    private javax.swing.JCheckBox jCB_persistir4;
    private javax.swing.JCheckBox jChB_destacar_boca;
    private javax.swing.JCheckBox jChB_destacar_face;
    private javax.swing.JCheckBox jChB_destacar_nariz;
    private javax.swing.JCheckBox jChB_destacar_olhos;
    private javax.swing.JCheckBox jChB_redimensionar_img_in;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JFormattedTextField jFTF_base_face_recortada;
    private javax.swing.JFormattedTextField jFTF_base_imagem_in;
    private javax.swing.JFormattedTextField jFTF_gridX;
    private javax.swing.JFormattedTextField jFTF_gridY;
    private javax.swing.JFormattedTextField jFTF_neighbors;
    private javax.swing.JFormattedTextField jFTF_num_of_components;
    private javax.swing.JFormattedTextField jFTF_radius;
    private javax.swing.JFormattedTextField jFTF_threshold;
    private javax.swing.JFormattedTextField jFTF_type_recognizer;
    private javax.swing.JLabel jL_GridX;
    private javax.swing.JLabel jL_GridY;
    private javax.swing.JLabel jL_Neighbors;
    private javax.swing.JLabel jL_NumOfComponents;
    private javax.swing.JLabel jL_Radius;
    private javax.swing.JLabel jL_Threshold;
    private javax.swing.JLabel jL_TypeRecognizer;
    private javax.swing.JLabel jL_face1;
    private javax.swing.JLabel jL_face2;
    private javax.swing.JLabel jL_face3;
    private javax.swing.JLabel jL_face4;
    private javax.swing.JLabel jL_face5;
    private javax.swing.JLabel jL_face6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JTextArea jTA_listaFotos;
    private javax.swing.JTextArea jTA_resultados;
    private javax.swing.JTextField jTF_face1;
    private javax.swing.JTextField jTF_face2;
    private javax.swing.JTextField jTF_face3;
    private javax.swing.JTextField jTF_face4;
    private javax.swing.JTextField jTF_face5;
    private javax.swing.JTextField jTF_face6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

    public class decuparDiretorio extends Thread {
        
        private String imagePath; 
        public decuparDiretorio(String imagePath) {
            this.imagePath = imagePath; 
        }
        
        public void run() {
            reconhecerFace(imagePath);
        }

        private void reconhecerFace(String imagePath) {
            // 1 - Normalização Pré-Detecção ---------------------------------------
            Mat img = Imgcodecs.imread(imagePath);

            jTA_resultados.append("----------------------------------------------------------------------- \n");
            jTA_resultados.append("Arquivo analisado: " + imagePath + "\n");
            jTA_resultados.append("Tamanho original - height: " + img.height() + " width " + img.width() + "\n");

            //redimensionar imagem de entrada
            if (jChB_redimensionar_img_in.isSelected() == true) {
                try {
                    img = redimensionarImagem(img);
                    jTA_resultados.append("Tamanho redimensionado - height: " + img.height() + " width " + img.width() + "\n");
                } catch (IOException ex) {
                    Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            //filtros
            switch (jCB_filtro1.getSelectedItem().toString()) {
                case "Gausian Blur":
                    Size ksize = new Size(3.0, 3.0);
                    Imgproc.blur(img, img, ksize);
                    break;

                case "Histogram Equalization":
                    Imgproc.cvtColor(img, img, Imgproc.COLOR_BGR2GRAY);
                    Imgproc.equalizeHist(img, img);
                    break;
            }

            switch (jCB_filtro2.getSelectedItem().toString()) {
                case "Gausian Blur":
                    Size ksize = new Size(3.0, 3.0);
                    Imgproc.blur(img, img, ksize);
                    break;

                case "Histogram Equalization":
                    Imgproc.cvtColor(img, img, Imgproc.COLOR_BGR2GRAY);
                    Imgproc.equalizeHist(img, img);
                    break;
            }

            // 2 - Detecção --------------------------------------------------------
            FaceDetector fd = new FaceDetector();
            //detectetFaces = fd.detectFaces(jTF_caminho_arquivo.getText(),
            detectetFaces = fd.detectFaces(img,
                    "src/haarcascades/" + jCB_haarcascade_face.getSelectedItem().toString() + ".xml",
                    jChB_destacar_face.isSelected(),
                    "src/haarcascades/" + jCB_haarcascade_olhos.getSelectedItem().toString() + ".xml",
                    jChB_destacar_olhos.isSelected(),
                    "src/haarcascades/" + jCB_haarcascade_boca.getSelectedItem().toString() + ".xml",
                    jChB_destacar_boca.isSelected(),
                    "src/haarcascades/" + jCB_haarcascade_nariz.getSelectedItem().toString() + ".xml",
                    jChB_destacar_nariz.isSelected(),
                    Integer.parseInt(jFTF_base_face_recortada.getText()),
                    Integer.parseInt(jFTF_base_face_recortada.getText()));

            ArrayList<Point> centerRightEye = fd.getCenterRightEye();
            ArrayList<Point> centerLeftEye = fd.getCenterLeftEye();

            jTA_resultados.append("Numero de faces detectadas: " + detectetFaces.size() + "\n");
            // 3 - Normalização pré-reconhecimento
            //filtros
            ArrayList<Mat> images = new ArrayList<Mat>();
            switch (jCB_filtro6.getSelectedItem().toString()) {
                case "Gausian Blur":
                    images = new ArrayList<Mat>();
                    for (Mat detectetFace : detectetFaces) {
                        Size ksize = new Size(3.0, 3.0);
                        Imgproc.blur(detectetFace, detectetFace, ksize);
                        images.add(detectetFace);
                    }
                    detectetFaces = images;

                    break;

                case "Histogram Equalization":
                    images = new ArrayList<Mat>();
                    for (Mat detectetFace : detectetFaces) {
                        Imgproc.cvtColor(detectetFace, detectetFace, Imgproc.COLOR_BGR2GRAY);
                        Imgproc.equalizeHist(detectetFace, detectetFace);
                        images.add(detectetFace);
                    }
                    detectetFaces = images;
                    break;

                case "Alinhar Olhos":
                    images = new ArrayList<Mat>();
                    if (centerRightEye.size() > 0 && centerLeftEye.size() > 0) {
                        for (int i = 0; i < detectetFaces.size(); i++) {
                            Mat detectedFace = detectetFaces.get(i);
                            double olhoDireitoX = centerRightEye.get(i).x;
                            double olhoDireitoY = centerRightEye.get(i).y;
                            double olhoEsquerdoX = centerLeftEye.get(i).x;
                            double olhoEsquerdoY = centerLeftEye.get(i).y;
                            double catetoAdjacente = olhoEsquerdoX - olhoDireitoX;
                            double catetoOposto = olhoEsquerdoY - olhoDireitoY;
                            double tgA = catetoOposto / catetoAdjacente;

                            double angulo = Math.toDegrees(Math.atan(tgA));
                            System.out.println("Cateto Oposto " + catetoOposto);
                            System.out.println("Cateto Adjacente " + catetoAdjacente);
                            System.out.println("tgA " + tgA);
                            System.out.println("angulo " + angulo);

                            Point center = new Point((detectedFace.height() / 2), (detectedFace.width() / 2));
                            double angle = Math.toDegrees(Math.atan(tgA));
                            double scale = 1;

                            Size rotatedSize = new Size(detectedFace.height(), detectedFace.height());
                            Mat mIntermediateMat = new Mat(rotatedSize, detectedFace.type());

                            //Imgproc.resize(src, dst, new Size(rotatedHeight, rotatedWidth));
                            Mat mapMatrix = Imgproc.getRotationMatrix2D(center, angle, scale);
                            Imgproc.warpAffine(detectedFace, mIntermediateMat, mapMatrix, detectedFace.size());

                            //dst = src.submat(0, mIntermediateMat.rows(), 0, mIntermediateMat.cols());
                            //detectedFace = new Mat(rotatedSize, detectedFace.type()); 
                            mIntermediateMat.copyTo(detectedFace);
                            //crop -10%

                            Rect retang = new Rect((int) (detectedFace.width() * 0.1), (int) (detectedFace.height() * 0.1), (int) (detectedFace.width() - (detectedFace.width() * 0.2)), (int) (detectedFace.height() - (detectedFace.height() * 0.2)));
                            detectedFace = detectedFace.submat(retang);

                            images.add(detectedFace);

                            String filename = "src/recognizeFaces/Rotated_Face_" + i + ".png";
                            Imgcodecs.imwrite(filename, detectedFace);

                        }
                        detectetFaces = images;
                    }
                    break;

            }

            // 4 - Classificação/reconhecimento das faces
            fr.recognizeFace(detectetFaces);

            ArrayList<Integer> predictedLabel = fr.getPredictedLabel();
            ArrayList<String> predictedLabelInfo = fr.getPredictedLabelInfo();
            ArrayList<Double> predictedConfidence = fr.getPredictedConfidence();

            for (int i = 0; i < predictedConfidence.size(); i++) {
                Double confidence = predictedConfidence.get(i);
                Integer label = predictedLabel.get(i);
                String labelInfo = predictedLabelInfo.get(i);
                //jTA_resultados.append("Face analisaza: " + detectetFaces.get(i) + "\n");

                jTA_resultados.append("Label     :" + label + "\n");
                jTA_resultados.append("Label Info:" + labelInfo + "\n");
                jTA_resultados.append("Confidence:" + confidence + "\n");
                if (centerRightEye.size() > 0 && centerLeftEye.size() > 0) {
                    jTA_resultados.append("Olho Direito : x " + centerRightEye.get(i).x + " - y " + centerRightEye.get(i).y + "\n");
                    jTA_resultados.append("Olho Esquerdo: x " + centerLeftEye.get(i).x + " - y " + centerLeftEye.get(i).y + "\n");
                }
                if (confidence <= Integer.parseInt(jFTF_threshold.getText())) {
                   jTA_listaFotos.append(imagePath + " contém " + labelInfo + "\n");
                }                
            }
//jTA_resultados.append(fr.get);

            try {
                carregarImagemInpThread(2, matToBufferedImage(fd.getImage()));

            } catch (IOException ex) {
                Logger.getLogger(TelaDecupagem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }     

        private void carregarImagemInpThread(int processo, BufferedImage img) throws IOException {
            BufferedImage imagemInp = img;
            double altura = img.getHeight();
            double largura = img.getWidth();
            double proporcao;
            if (altura > largura) {
                proporcao = altura / largura;
                altura = 450;
                largura = altura / proporcao;
            } else {
                proporcao = largura / altura;
                largura = 450;
                altura = largura / proporcao;
            }
            ImageIcon ico = new ImageIcon(img);

            switch (processo) {
                case 1: //detecção de faces
                    jLabel1.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int) largura, (int) altura, Image.SCALE_DEFAULT)));
                    jLabel1.repaint();
                    jLabel1.setText("");
                    break;
                case 2: //reconhecimento de faces
                    jLabel5.setIcon(new ImageIcon(ico.getImage().getScaledInstance((int) largura, (int) altura, Image.SCALE_DEFAULT)));
                    jLabel5.repaint();
                    jLabel5.setText("");
                    break;
            }

        }
    }
}
